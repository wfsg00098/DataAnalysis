from openpyxl import load_workbook
from matplotlib import pyplot as plt

def draw(x_data,y_data):
    _, ax = plt.subplots()
    ax.plot(x_data,y_data)
    ax.set_xlabel('time')
    ax.set_ylabel('pressure')
    ax.set_title('test')



if __name__ == '__main__':

    plt.rcParams['savefig.dpi'] = 1000
    plt.rcParams['figure.dpi'] = 1000

    origin_x = [835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682]
    origin_y = [10016, 11601, 12708, 13640, 14465, 15355, 16080, 16494, 16712, 17039, 15865, 17388, 17510, 17627, 17716, 17745, 17806, 17789, 17775, 17734, 16308, 17914, 17846, 17889, 17850, 17792, 17773, 17666, 17647, 17602, 16117, 17613, 17789, 17778, 17722, 17701, 17865, 17816, 17823, 17724, 16869, 18006, 18185, 18273, 18077, 18318, 18357, 18619, 18843, 18902, 18290, 18927, 18787, 18332, 17508, 16467, 20287, 19438, 19555, 18981, 17726, 18551, 18241, 18050, 17616, 17097, 16162, 14909, 14112, 13338, 11878, 13456, 13771, 14142, 14579, 14820, 15058, 15019, 15228, 15218, 14126, 14857, 14710, 14182, 13685, 13408, 12632, 12163, 11972, 11762, 10994, 12029, 12082, 12290, 12315, 12282, 12572, 12588, 12645, 12663, 11667, 12608, 12851, 12854, 12871, 12926, 12991, 13168, 13268, 13283, 12476, 13516, 13566, 13517, 13504, 15893, 19875, 19605, 20141, 20127, 18181, 19286, 18080, 16789, 15613, 14787, 14298, 14181, 14181, 14535, 12604, 15232, 15589, 15791, 16242, 16469, 16526, 16322, 16119, 15831, 13833, 14974, 14134, 13071, 12462, 11760, 11115, 10791, 10945, 10924, 10320, 11139, 11301, 11319, 11395, 11331, 11442, 11439, 11503, 11491, 11102, 11577, 11781, 12105, 12499, 12752, 13330, 13673, 14177, 14549, 14676, 15348, 15350, 15220, 15150, 15610, 18815, 18079, 17771, 16825, 14896, 15673, 14108, 13090, 13059, 13327, 13396, 13417, 13584, 13955, 12831, 14498, 14554, 14509, 14417, 14246, 13894, 13464, 12925, 12568, 11543, 11979, 11897, 11522, 11213, 11180, 10932, 10750, 10775, 10876, 10796, 10619, 10750, 10731, 10713, 10745, 10713, 10708, 10673, 10683, 10938, 11101, 11148, 11293, 11292, 11544, 11509, 11550, 11278, 11351, 11281, 11267, 11034, 10788, 14448, 16597, 15716, 15878, 15551, 17124, 16652, 16296, 16241, 16336, 16338, 16682, 17146, 17766, 17634, 18292, 18385, 18375, 18231, 17857, 17249, 16411, 15847, 15162, 13799, 14477, 14098, 13790, 13532, 13292, 13203, 12927, 12922, 12820, 11941, 12952, 12967, 13025, 13117, 13076, 13220, 13253, 13342, 13677, 13175, 14333, 14473, 14772, 15183, 15407, 15582, 15912, 16201, 16128, 16114, 16705, 16785, 16835, 16301, 18707, 22372, 21740, 21415, 20878, 17727, 17685, 17629, 17377, 16648, 16660, 16651, 17122, 17495, 17694, 16051, 18020, 18143, 18112, 18051, 18046, 17797, 17638, 17234, 16946, 14815, 15545, 14962, 14587, 13936, 13242, 12866, 12490, 12382, 12134, 11473, 12155, 12368, 12551, 12578, 12810, 12907, 13011, 13376, 13528, 13257, 13793, 13907, 13888, 13759, 13977, 14061, 13848, 16624, 21146, 19686, 20401, 20458, 20293, 18459, 16945, 16554, 16273, 16449, 17054, 15847, 18041, 18519, 18728, 19072, 19376, 19386, 19315, 19162, 18846, 17262, 17902, 17467, 16904, 15883, 15203, 14808, 14349, 13781, 13423, 12237, 13279, 13360, 13538, 13649, 13805, 13774, 13960, 13983, 14100, 13540, 14316, 14562, 14635, 14587, 14571, 14770, 14895, 14931, 14782, 14493, 14625, 14211, 19194, 20336, 20137, 19658, 23020, 25442, 24723, 22820, 21859, 21227, 21400, 21306, 20839, 20648, 20296, 19612, 19309, 17910, 18477, 17902, 17584, 17104, 16403, 16097, 15926, 15715, 15382, 13978, 15588, 15391, 15325, 15172, 15030, 15005, 14839, 14891, 14800, 14146, 14614, 14480, 14403, 14446, 14345, 14311, 14324, 14351, 14596, 13810, 14424, 14650, 14816, 14812, 14760, 14609, 14570, 14861, 17638, 18887, 22134, 22337, 21945, 20896, 19354, 18352, 17590, 16692, 16596, 15801, 17057, 17780, 18341, 18811, 19030, 19156, 19044, 19124, 19022, 17968, 18738, 18678, 18786, 18907, 19040, 19340, 19586, 19951, 19995, 19530, 19954, 19898, 19673, 19488, 19172, 18738, 18188, 17857, 17527, 16702, 16751, 16688, 16282, 16150, 15975, 15712, 15637, 15568, 15440, 14863, 15229, 15109, 15157, 14978, 14788, 14854, 14658, 14763, 14930, 14224, 14835, 14778, 14529, 14484, 16890, 17536, 18151, 20306, 22726, 19808, 20102, 18447, 16786, 15170, 14678, 14738, 14702, 15067, 15382, 14624, 15949, 16245, 16461, 16429, 16588, 16676, 16801, 16969, 16987, 16256, 16921, 16972, 16781, 16681, 16293, 16095, 16131, 16042, 15856, 14996, 15726, 15795, 15746, 15741, 15954, 15895, 15857, 15957, 15916, 15069, 15558, 15369, 15107, 14986, 14849, 14727, 14819, 14853, 14840, 14210, 15018, 15108, 15222, 15216, 15286, 15581, 15531, 15617, 15458, 14703, 18631, 21541, 24918, 26483, 25792, 23901, 21920, 20334, 18634, 15633, 15921, 16099, 16290, 16377, 16775, 17305, 17802, 18049, 18503, 18059, 18828, 18986, 18969, 19052, 18928, 18979, 19013, 19028, 19158, 18514, 19201, 19213, 19257, 19351, 19338, 19368, 19356, 19243, 19313, 18536, 19315, 19243, 19269, 19046, 18844, 18457, 18174, 18091, 17935, 16589, 17707, 17664, 17394, 17064, 16543, 16240, 16142, 16009, 15748, 14735, 15454, 15197, 14880, 14867, 17024, 19940, 24367, 25027, 24620, 21284, 22415, 21025, 19479, 17904, 16595, 15458, 14339, 14076, 13978, 12740, 14791, 15414, 16136, 16856, 17551, 17859, 18201, 18290, 18030, 16504, 17711, 17491, 16925, 16131, 15362, 14573, 14042, 13484, 13161, 11975, 13099, 13320, 13334, 13534, 13446, 13579, 13485, 13494, 13497, 12893, 13357, 13410, 13516, 13431, 13310, 13322, 13258, 13175, 13152, 12242, 13213, 13242, 13443, 13511, 13492, 13539, 13793, 16135, 17387, 17057, 20081, 20541, 19560, 18096, 16906, 16343, 14865, 13340, 12868, 11859, 12951, 12702, 12831, 13024, 13318, 13495, 13692, 13862, 13933, 13014, 13904, 13914, 13872, 13959, 13937, 14049, 14137, 14231, 14493, 13452, 14818, 14829, 14854, 14859, 14873, 14860, 14775, 14791, 14535, 13377, 14316, 14435, 14276, 14286, 14142, 13965, 13630, 13742, 13268, 11977, 13076, 13120, 13365, 13757, 14073, 14052, 14263, 14238, 14253, 15319, 18884, 18768, 19912, 21529, 22685, 21894, 20519, 19410, 18194, 14852, 15577, 14588, 14125, 14291, 14239, 14263, 14475, 14778, 14986, 13232, 15217, 15231, 15357, 15472, 15539, 15586, 15743, 15960, 15811, 14555, 16035, 16187, 16154, 16244, 15762, 15559, 15156, 14587, 14031, 11438, 12973, 12390, 12444, 12510, 12542, 12498, 12766, 12780, 12890, 12009, 12878, 12929, 12814, 12873, 12849, 12839, 12565, 12694, 12677, 11960, 12173, 11892, 11807, 11484, 11111, 10628]

    judge = input('请选择使用几次指数平滑：一次请按1；二次请按2；三次请按3：')
    ##这里是打开excel将数据储存到数组里面
    wb = load_workbook(filename=r'C:\Users\Badegg\Desktop\1.xlsx')  ##读取路径
    ws = wb.get_sheet_by_name("Sheet1")  ##读取名字为Sheet1的sheet表
    info_data_id = []
    info_data_sales = []

    for row_A in range(1, 3):  ## 遍历第1行到2行
        id = ws.cell(row=row_A, column=1).value  ## 遍历第1行到2行，第1列
        info_data_id.append(id)
    for row_num_BtoU in range(1, len(info_data_id) + 1):  ## 遍历第1行到2行
        row_empty = []  ##建立一个空数组作为临时储存地，每次换行就被清空
        for i in range(2, 845):  ## 遍历第1行到2行，第1到19列
            data = ws.cell(row=row_num_BtoU, column=i).value
            if data == None:
                pass
            else:
                row_empty.append(data)  ##将单元格信息储存进去
        info_data_sales.append(row_empty)  ##row_empty每次储存完1到19列后压给info_data_sales，然后row_empty被清空
    print(info_data_id)
    print(info_data_sales)
    if judge == '1':
        ##############################下面是计算St(1)下面写为S1_t_######################################
        print('你选择了一次指数平滑预测')
        ##一次指数平滑的初值为S1_1，用S1_1来储存每一组数据的一次平滑的数值
        S1_1 = []
        for m in range(0, len(info_data_id)):
            S1_1_empty = []
            x = 0
            for n in range(0, 3):
                x = x + int(info_data_sales[m][n])
            x = x / 3
            S1_1_empty.append(x)
            S1_1.append(S1_1_empty)
        # print(S1_1)

        a = []  ##这是用来存放阿尔法的数组
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            v = input('请输入第' + str(i + 1) + '组数据的a：')
            a.append(v)

        for i in range(0, len(info_data_sales)):
            MSE = 0
            for j in range(0, len(info_data_sales[i])):
                S1_1[i].append(
                    float(a[i]) * int(info_data_sales[i][j]) + (1 - float(a[i])) * int(S1_1[i][j]))  ##计算预估值
                MSE = (int(S1_1[i][j]) - int(info_data_sales[i][j])) ** 2 + MSE
                # print(info_data_sales[i][j], S1_1[i][j])
            MSE = (MSE ** (1 / 2)) / int(len(info_data_sales[i]))  ##得到均方误差
            info_MSE.append(MSE)
        # print(info_MSE)
        # print(S1_1)
        for i in range(0, len(S1_1)):
            print('第' + str(i + 1) + '组的一次平滑预估值为:' + str(S1_1[i][len(S1_1[i]) - 1]) + '；均方误差为：' + str(info_MSE[i]))

    if judge == '2':
        ##############################下面是计算St(2)下面写为S2_t_######################################
        print('你选择了二次指数平滑预测')

        ##二次指数平滑的初值为S2_1，用S2_1_new来储存每一组数据的一次平滑的数值
        S2_1 = []
        S2_2 = []
        for m in range(0, len(info_data_id)):
            S2_1_empty = []
            x = 0
            for n in range(0, 3):
                x = x + float(info_data_sales[m][n])
            x = x / 3
            S2_1_empty.append(x)
            S2_1.append(S2_1_empty)
            S2_2.append(S2_1_empty)
        # print(S2_2)
        a = []  ##这是用来存放阿尔法的数组
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            v = float(input('请输入第' + str(i + 1) + '组数据的a：'))
            a.append(v)

        ##下面是计算一次指数平滑的值
        S2_1_new1 = []
        for i in range(0, len(info_data_sales)):
            S2_1_new = [[]] * len(info_data_id)
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S2_1_new[i].append(
                        float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(S2_1[i][j]))
                else:
                    S2_1_new[i].append(float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(
                        S2_1_new[i][j - 1]))  ##计算一次指数的值
            S2_1_new1.append(S2_1_new[i])
        # print(S2_1_new1)
        # print(len(S2_1_new1[i]))

        ##下面是计算二次指数平滑的值
        S2_2_new1 = []
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            S2_2_new = [[]] * len(info_data_id)
            MSE = 0
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S2_2_new[i].append(float(a[i]) * float(S2_1_new1[i][j]) + (1 - float(a[i])) * float(S2_2[i][j]))
                else:
                    S2_2_new[i].append(float(a[i]) * float(S2_1_new1[i][j]) + (1 - float(a[i])) * float(
                        S2_2_new[i][j - 1]))  ##计算二次指数的值
                MSE = (int(S2_2_new[i][j]) - int(info_data_sales[i][j])) ** 2 + MSE
            MSE = (MSE ** (1 / 2)) / int(len(info_data_sales[i]))
            info_MSE.append(MSE)
            S2_2_new1.append(S2_2_new[i])
        # print(S2_2_new1)
        # print(len(S2_2_new1[i]))

        ##下面是计算At、Bt以及每个预估值Xt的值，直接计算预估值，不一一列举Xt的值了

        x = []
        x1 = []
        y = []
        y1 = []
        for u in range(1, 101):
            Xt = []
            for i in range(0, len(info_data_sales)):
                At = (float(S2_1_new1[i][len(S2_1_new1[i]) - 1]) * 2 - float(S2_2_new1[i][len(S2_2_new1[i]) - 1]))
                Bt = (float(a[i]) / (1 - float(a[i])) * (
                        float(S2_1_new1[i][len(S2_1_new1[i]) - 1]) - float(S2_2_new1[i][len(S2_2_new1[i]) - 1])))
                Xt.append(At + Bt * int(u))
                if i%2 == 0:
                    x.append(Xt[i])
                    origin_x.append(Xt[i])
                    x1.append(info_MSE[i])
                else:
                    y.append(Xt[i])
                    origin_y.append(info_MSE[i])
                    y1.append(info_MSE[i])
        with open('2.txt','w') as f:
            f.write(str(x)+"\n")
            f.write(str(x1) + "\n")
            f.write(str(y) + "\n")
            f.write(str(y1) + "\n")
        draw(origin_x,origin_y)
        plt.show()




    if judge == '3':
        ##############################下面是计算St(3)下面写为S3_t_######################################
        print('你选择了三次指数平滑预测')
        S3_1 = []
        S3_2 = []
        S3_3 = []
        for m in range(0, len(info_data_id)):
            S3_1_empty = []
            x = 0
            for n in range(0, 3):
                x = x + float(info_data_sales[m][n])
            x = x / 3
            S3_1_empty.append(x)
            S3_1.append(S3_1_empty)
            S3_2.append(S3_1_empty)
            S3_3.append(S3_1_empty)
        # print(S3_1)
        a = []  ##这是用来存放阿尔法的数组
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            v = float(input('请输入第' + str(i + 1) + '组数据的a：'))
            a.append(v)

        ##下面是计算一次指数平滑的值
        S3_1_new1 = []
        for i in range(0, len(info_data_sales)):
            S3_1_new = [[]] * len(info_data_id)
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S3_1_new[i].append(
                        float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(S3_1[i][j]))
                else:
                    S3_1_new[i].append(float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(
                        S3_1_new[i][j - 1]))  ##计算一次指数的值
            S3_1_new1.append(S3_1_new[i])

        ##下面是计算二次指数平滑的值
        S3_2_new1 = []
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            S3_2_new = [[]] * len(info_data_id)
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S3_2_new[i].append(float(a[i]) * float(S3_1_new1[i][j]) + (1 - float(a[i])) * float(S3_2[i][j]))
                else:
                    S3_2_new[i].append(float(a[i]) * float(S3_1_new1[i][j]) + (1 - float(a[i])) * float(
                        S3_2_new[i][j - 1]))  ##计算二次指数的值
            S3_2_new1.append(S3_2_new[i])

        ##下面是计算二次指数平滑的值
        S3_3_new1 = []
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            S3_3_new = [[]] * len(info_data_id)
            MSE = 0
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S3_3_new[i].append(float(a[i]) * float(S3_2_new1[i][j]) + (1 - float(a[i])) * float(S3_3[i][j]))
                else:
                    S3_3_new[i].append(float(a[i]) * float(S3_2_new1[i][j]) + (1 - float(a[i])) * float(
                        S3_3_new[i][j - 1]))  ##计算三次指数的值
                MSE = (int(S3_3_new[i][j]) - int(info_data_sales[i][j])) ** 2 + MSE
            MSE = (MSE ** (1 / 2)) / int(len(info_data_sales[i]))
            info_MSE.append(MSE)
            S3_3_new1.append(S3_3_new[i])
            # print(S3_3_new1)

        ##下面是计算At、Bt、Ct以及每个预估值Xt的值，直接计算预估值，不一一列举Xt的值了
        x = []
        x1 = []
        y = []
        y1 = []
        for u in range(1,101):
            Xt = []
            for i in range(0, len(info_data_sales)):
                At = (
                        float(S3_1_new1[i][len(S3_1_new1[i]) - 1]) * 3 - float(
                    S3_2_new1[i][len(S3_2_new1[i]) - 1]) * 3 + float(
                    S3_3_new1[i][len(S3_3_new1[i]) - 1]))
                Bt = ((float(a[i]) / (2 * ((1 - float(a[i])) ** 2))) * ((6 - 5 * float(a[i])) * (
                        float(S3_1_new1[i][len(S3_1_new1[i]) - 1]) - 2 * (5 - 4 * float(a[i])) * float(
                    S3_2_new1[i][len(S3_2_new1[i]) - 1]) + (4 - 3 * float(a[i])) * float(
                    S3_3_new1[i][len(S3_3_new1[i]) - 1]))))
                Ct = (((float(a[i])) ** 2) / (2 * ((1 - float(a[i])) ** 2))) * (
                        float(S3_1_new1[i][len(S3_1_new1[i]) - 1]) - float(
                    S3_2_new1[i][len(S3_2_new1[i]) - 1]) * 2 + float(
                    S3_3_new1[i][len(S3_3_new1[i]) - 1]))
                Xt.append(At + Bt * int(u) + Ct * (int(u) ** 2))
                if i%2 == 0:
                    x.append(Xt[i])
                    origin_x.append(Xt[i])
                    x1.append(info_MSE[i])
                else:
                    y.append(Xt[i])
                    origin_y.append(info_MSE[i])
                    y1.append(info_MSE[i])
        with open('3.txt','w') as f:
            f.write(str(x)+"\n")
            f.write(str(x1) + "\n")
            f.write(str(y) + "\n")
            f.write(str(y1) + "\n")
        draw(origin_x, origin_y)
        plt.show()

