# coding=utf-8
import numpy as np
from matplotlib import pyplot as plt

'''通过方差的百分比来计算将数据降到多少维是比较合适的，
函数传入的参数是特征值和百分比percentage，返回需要降到的维度数num'''


def eigValPct(eigVals, percentage):
    sortArray = np.sort(eigVals)  # 使用numpy中的sort()对特征值按照从小到大排序
    sortArray = sortArray[-1::-1]  # 特征值从大到小排序
    arraySum = np.sum(sortArray)  # 数据全部的方差arraySum
    tempSum = 0
    num = 0
    for i in sortArray:
        tempSum += i
        num += 1
        if tempSum >= arraySum * percentage:
            print(num)
            return num


'''pca函数有两个参数，其中dataMat是已经转换成矩阵matrix形式的数据集，列表示特征；
其中的percentage表示取前多少个特征需要达到的方差占比，默认为0.9'''


def pca(dataMat, percentage=0.9):
    meanVals = np.mean(dataMat, axis=0)  # 对每一列求平均值，因为协方差的计算中需要减去均值
    meanRemoved = dataMat - meanVals
    covMat = np.cov(meanRemoved, rowvar=False)  # cov()计算方差
    eigVals, eigVects = np.linalg.eig(np.mat(covMat))  # 利用numpy中寻找特征值和特征向量的模块linalg中的eig()方法
    k = 2  # 要达到方差的百分比percentage，需要前k个向量
    eigValInd = np.argsort(eigVals)  # 对特征值eigVals从小到大排序
    eigValInd = eigValInd[:-(k + 1):-1]  # 从排好序的特征值，从后往前取k个，这样就实现了特征值的从大到小排列
    redEigVects = eigVects[:, eigValInd]  # 返回排序后特征值对应的特征向量redEigVects（主成分）
    lowDDataMat = meanRemoved * redEigVects  # 将原始数据投影到主成分上得到新的低维数据lowDDataMat
    reconMat = (lowDDataMat * redEigVects.T) + meanVals  # 得到重构数据reconMat
    return lowDDataMat, reconMat


x1 = [63,64.25,59.75,75,76,70,52.5,56.75,55.5,56.5,58.5,56.5,59,60.25,52.25,55.5,61.25,62.75,77.5,78,58,54.75,56.25,51.25,54.75,59.5,69,64.75,57,56,54,67,62,60.25,62.25,64.5,73,69,52.25,48,52.75,59,58.75,61.25,59.5,63.5,74.5,71,61.25,57.75,68.25,71,75,69,68.5,72,70.75,83.5,58.5,55.5,57,54.25,60.75,68,68,71,71.5,76,77.5,81,63.25,62,67.75,66.25,48.5,73.5,65.5,82.5,61.75,27.2,80,57.75,66,60.75,61.5,40.83,50.25,53,57.5,63.5,51.5,51,55.25,58.5,59,67.5,64,67.25,70,62.5,61.75,60.5,55.5,60,62.5,63.5,61.25,60,63,48.5,50.25,51.25,58.75,57.5,61,64,59.75,64,68,66,54.75,54,53.25,66,76.5]
x2 = [120,122.5,117.25,150,149,141.5,105,111.25,112,112.75,120,113.75,117,118,107.75,115,127.25,128.5,156,154,118,112.5,111.75,102.5,107.5,118.75,134,124,112.5,115.5,111.25,133,125.5,120,124.5,129,142,137.5,106.25,94.75,103.5,116,119.75,124.75,111.75,128.25,146.5,141.5,122,116.5,136.75,135.5,140.5,135,136.5,138.75,140.25,158.5,118.5,111.75,117,113,121,136.5,132.5,143,146,156,154.5,167,125,125.75,139.75,130.5,98.75,144.5,130.25,174,123.75,54.7,168.5,117.75,132,118.25,122.25,79.5,101.5,113.25,113,125.25,102.5,102.75,110.25,118.5,119,133,125.75,131.75,129.75,125.5,122.5,122,112.75,119.25,124.75,128.75,128.75,123.75,135,96,99.25,104,118.75,114.25,120,125,118,130.5,138,135.5,108.25,106.75,106,135,149]
x3 = [1.03,1.15,1.09,1.69,1.55,1.52,0.89,1.01,1.02,1.07,1.22,1.15,1,1.11,1.07,1.12,1.35,1.39,1.28,1.21,1.04,0.98,0.98,1.18,1.3,1.55,1.91,1.61,1.02,1.14,1.05,1.51,1.53,1.28,1.14,1.19,1.48,1.43,0.92,0.77,0.92,1.01,1.02,1.25,0.89,1.1,1.32,1.32,1.05,0.99,1.17,1.23,1.25,1.21,1.18,1.23,1.36,1.72,1.21,1.05,1.2,1.07,1.39,1.73,1.25,1.39,1.38,1.49,1.53,1.74,1.21,1.28,1.53,1.35,0.45,1.14,1.12,1.64,0.96,0.39,1.85,0.81,1.04,0.89,1.29,0.56,0.98,1.12,1.15,1.18,1.14,1.22,1.17,1.15,1.35,1.23,1.13,1.45,1.34,1.1,0.94,1.07,1.17,1.33,1.36,1.23,1.23,1.2,1.73,0.93,1.03,1.14,1.15,1.09,1.07,1.12,1.04,1.23,1.31,1.29,0.89,0.92,0.72,1.09,1.41]
x4 = [230,235,245,120,155,145,283.33,270,250,215,190,240,255,235,220,215,140,140,175,220,240,255,265,180,145,115,60,100,256.67,235,258.33,155,180,195,220,180,145,130,251.67,328.33,241.67,195,180,140,295,255,200,210,270,295,235,185,240,225,250,205,180,120,195,216.67,180,185,170,115,225,220,215,165,165,160,225,220,170,195,441.67,205,215,135,275,364,125,310,255,300,175,430,200,230,200,240,168.33,175,186.67,185,130,135,225,210,195,250,335,275,220,200,180,205,195,195,145,236.67,186.67,186.67,200,230,265,245,280,220,195,210,330,315,395,235,205,]

data = np.zeros((len(x1), 4), dtype='float64')

for i in range(len(x1)):
    data[i][0] = x1[i]
    data[i][1] = x2[i]
    data[i][2] = x3[i]
    data[i][3] = x4[i]

data1_pca, data2_pca = pca(data)
NP = plt.scatter(np.resize(data1_pca.T[0],len(x1)),np.resize(data1_pca.T[1],len(x1)),c='red',marker='x')


y1 = [65.5,58.75,58,79,68,64,54.25,55,59.5,58.75,59.5,62,62.5,47,47.33,48.5,56.25,61.5,65,52,49.5,50,60.25,59,52.25,56,37,56.75,54.25,54.75,63.5,61.75,62.25,45.75,44.75,51,51.25,50.25,78,78,72,72,69,53.75,55.5,62.75,60,61.5,56.5,57.25,56.25,60.25,59,59.75,58.75,51,55.5,54.25,55.25,52.25,51.25,50,52,51.75,51,55,50.75,56.75,59,56,64,61,65,57.75,50,45.75,58,53.75,57,55.25,52.75,48.25,46.5,44.5,51.25,56.25,51.5,58.75,59,61,51.25,54.75,54]
y2 = [129,117.25,115,148,139,131.5,113.75,110,114.5,113.5,121,123.5,122,93.25,95.67,94.25,118.5,127.5,133,105.75,101.5,96.75,114.5,116,104.5,109.5,67.17,112.5,105.25,109.25,125.5,123.75,118.75,98.5,94.75,101,102.5,100.25,151.5,154,147,146,142.5,105,109.25,120.5,121,112.75,112.25,115,106.25,116.25,122.5,121.5,122.75,102.75,111.75,108.75,106.25,104.5,103.25,97.25,102.5,101.5,99.5,104.5,105.5,110.5,111.25,114,124.5,118,124,116.5,98,93,113.5,107,111.75,108.5,99.75,101.5,91.75,88.75,96,105.75,105,119.5,122,120.5,109,108.75,112]
y3 = [1.11,0.98,1,1.16,1.19,1.17,1.07,0.92,1.06,1.05,1.12,1.09,1.22,0.74,0.75,0.71,1.08,1.27,1.36,1.07,0.91,0.89,0.84,0.85,0.77,0.83,0.3,1,1.01,1,1.34,1.2,0.96,0.68,0.76,0.8,0.92,0.87,1.34,1.13,1,1.15,1.1,1.08,0.98,1.17,1.22,0.94,0.96,0.97,0.75,0.93,1.02,1.1,1.09,0.88,0.96,0.95,1,0.96,0.88,0.92,1.1,1.09,0.86,0.97,0.98,1.12,1.14,1.16,1.37,1.28,1.48,0.98,0.91,0.78,1.15,1.21,1.08,0.85,0.76,0.76,0.79,0.78,0.75,0.85,0.87,1.11,1.18,1.14,0.9,0.81,0.91]
y4 = [205,235,250,175,230,235,225,265,235,250,240,235,220,345,310,315,225,195,215,205,245,250,355,345,390,340,873.33,245,238.33,220,175,180,205,310,288.33,330,285,283.33,255,280,285,285,280,245,250,210,230,285,285,290,330,250,265,270,260,283.33,255,270,228.33,243.33,270,220,205,210,255,241.67,240,205,225,230,155,195,180,245,265,275,150,165,175,355,421.67,411.67,296.67,301.67,308.33,278.33,261.67,205,215,235,300,315,310]

datay = np.zeros((len(y1), 4), dtype='float64')

for i in range(len(y1)):
    datay[i][0] = y1[i]
    datay[i][1] = y2[i]
    datay[i][2] = y3[i]
    datay[i][3] = y4[i]

data1y_pca, data2y_pca = pca(datay)
PDS = plt.scatter(np.resize(data1y_pca.T[0],len(y1)),np.resize(data1y_pca.T[1],len(y1)),c='blue',marker='x')


plt.legend((NP,PDS),('Age<=30','Age>30'))
plt.show()