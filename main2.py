from openpyxl import load_workbook
from matplotlib import pyplot as plt
import pandas as pd

if __name__ == '__main__':

    plt.rcParams['savefig.dpi'] = 1000
    plt.rcParams['figure.dpi'] = 1000

    origin_x = [37,38,39,40,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427]
    origin_y = [129,166,156,175,267,250,275,362,374,348,361,362,399,342,376,352,370,414,415,499,520,574,319,587,683,734,785,909,959,1142,1201,1288,756,1432,1509,1703,1710,1859,2063,2175,2308,2468,1896,2821,3096,3315,3630,3943,4208,4458,4702,4945,4855,5481,5837,6310,6623,6925,7308,7729,8050,8407,8493,9146,9489,9798,10033,10307,10526,10724,10834,10860,10285,10940,11067,13307,15739,16678,17542,17934,18344,18638,16456,18992,18804,18528,18062,17836,17922,18543,19049,19613,18619,20082,20128,20170,20091,19758,19605,19503,19692,19959,19373,20771,21058,21449,21531,21674,21922,22000,22026,22215,21436,22535,22488,22411,22464,22501,22609,22763,22756,22639,21440,22116,22012,21543,21398,21026,20429,19973,19875,19335,18613,21955,21660,21347,20845,21078,21037,21157,20996,20817,18014,19826,18861,17906,17404,16265,14930,13631,12770,13050,11758,13491,13976,14319,14597,15198,15632,16113,16336,16616,15997,16460,16515,16172,15925,15696,15331,15093,14914,14713,12675,14341,14201,14021,13997,13763,13700,13507,13113,12872,11947,12813,12772,12909,12837,13078,12935,12775,12817,12728,11971,12598,12272,11814,14331,16288,16845,17636,17686,17350,15608,17412,16965,16716,16128,15916,16310,16387,16424,16759,16316,16901,16830,16778,16695,16633,16457,16340,16106,15910,15206,16119,16289,16575,16905,17151,17316,17645,17816,18092,17398,18457,18460,18413,18403,18208,18091,18074,17826,17662,16704,17349,17155,16640,16261,15910,15763,15281,14809,14499,15052,18110,18345,18301,18234,18465,18371,18295,18366,18084,16217,17147,16519,16113,15264,14595,13990,13081,13719,14092,14177,15081,15426,15897,16273,16749,17046,17337,17551,17707,17427,17913,17983,18101,18155,18025,17921,17848,17891,18086,17409,18166,18103,17794,17846,17567,17359,17114,16462,16013,13942,15212,15177,15164,14835,14919,14870,14981,14814,14724,13781,14137,14067,13724,13362,16504,19987,20330,20735,20251,18099,19808,19179,18554,17624,16759,15863,15572,15816,15965,15400,16269,16369,16399,16436,16362,16309,16232,16241,16244,15497,16352,16336,16411,16493,16650,16769,16987,17162,17365,16588,17726,17774,17885,17912,17907,17871,17925,17948,17871,17370,17811,17668,17539,17301,17329,17280,17157,17042,16791,15964,16022,15377,15467,16973,16468,15927,14712,13025,12841,11731,13496,13850,14197,14193,14106,13867,13355,12738,12105,10670,11093,10606,10616,10795,11099,11230,11578,11783,12018,11326,12591,12791,13194,13476,13642,13673,13768,13764,13713,12752,13446,13261,13192,12964,12770,12459,12173,11872,11686,10129,10731,10335,10158,9572,9667,9538,9306,9127,8788,7828,8784,8782,8833,8785,8743,8635,8560,9477,12331,12244,13872,14311,14674,14861,14864,14889,14545,13930,13626,13028,14158,14233,14493,14681,14755,14734,14682,14546,14461,13699,14252,14158,14100,13995,14159,14233,14420,14571,14862,14296,15351,15515,15717,15934,16042,16127,16098,16232,16189,15575,15954,15834,15645,15376,15127,14871,14453,13850,13644,13093,13701,13753,13721,13566,13469,16263,16885,17072,17493,16432,17995,17953,17733,17712,17528,16788,16080,15145,14459,12856,13247,12755,12632,13021,13393,13932,14377,14754,15060,15023,15555,15567,15759,15802,15872,15814,15769,15782,15742,15001,15512,15477,15400,15441,15611,15546,15599,15560,15542,14616,15420,14991,14758,14498,14227,13903,13718,13579,13587,13165,13650,13676,13576,13384,13287,13116,12880,12647,15502,16918,18359,18709,18937,18508,18421,17625,17234,16480,16351,15939,17511,17362,17729,17960,18140,18178,18010,17719,17346,16420,16663,16572,16557,16689,16977,17333,17830,18149,18504,18103,19097,18999,19070,19129,19157,18964,18560,18248,17980,16684,16969,16574,16258,15968,15520,15161,14909,14484,14119,13498,17857,19374,19697,20598,20729,21063,21004,20748,20497,18698,19113,18596,17607,16743,15981,16163,16630,17106,17415,17766,18227,18407,18445,18555,18499,18394,18306,18095,17908,17331,17514,17292,17250,16931,16576,16609,16459,16505,16544,15591,16347,16055,15919,15704,15457,15125,14920,14711,14478,13501,14251,14161,13946,14022,13854,13563,13270,12859,13851,16091,19149,19117,18547,18086,17875,17679,17108,16440,15490,13319,15460,15912,16125,16309,16478,16657,16700,16577,16513,16034,16194,16099,16017,15944,15962,16147,16392,16533,16710,16109,17034,17255,17371,17635,17566,17618,17534,17234,16808,15470,15727,15542,15162,14451,14374,14158,14025,13718,13458,12482,13081,15029,15776,15856,16120,16320,16446,16927,17325,15855,17037,16764,16230,15440,14862,14593,13843,13646,13892,13419,14476,14808,15028,15079,15122,15161,15164,15067,14805,12831,14220,13981,13692,13566,13261,13097,12881,12635,12479,11516,12370,12295,12286,12412,12428,12382,12489,12458,12399,11971,12486,12497,12473,12417,12349,12148,12033,11795,11577,10644,10980,14357,15960,15887,15637,15065,14823,14510,14245,12447,13470,13743,13745,13560,13605,13603,13663,13702,13649,12056,13434,13289,13094,12970,12931,12915,12828,12979,13034,11643,13230,13387,13676,14076,14276,14465,14510,14589,14516,12892,14361,14086,14045,13713,13208,12816,12587,12352,12077,10333,11704,12382,14724,14766,14615,14399,14539,14602,14908,13315,14614,14229,13983,13363,12759,12418,12182,12247,12793,12699,13818,14156,14488,14841,14984,14925,15025,15140,15368,14282,14891,14650,14509,14128,13682,13596,13547,13498,13451,12230,13145,12927,12832,12692,12561,12384,12424,12401,12370,11487,12273,12082,12195,12078,11936,12016,11878,11835,11622,11011,11384,11584,15342,18443,19267,19139,19084,19041,19018,17957,18871,18227,17689,17279,17244,17401,17223,17168,17212,16483,17225,17119,17014,16931,16848,16827,16828,16831,16926,16317,17054,17280,17430,17674,18000,18300,18444,18802,18912,18347,19212,19250,19263,19184,19130,18951,18994,18814,18485,17536,17594,17428,19516,19861,19243,17934,17595,18391,18835,17651,19745,19616,19295,18813,18417,17781,16941,16177,15755,15158,15719,15648,15770,15640,15678,15583,15595,15731,15904,15408,16137,16109,15949,15839,15681,15506,15223,15057,14803,13703,14495,14442,14439,14281,14113,13870,13718,13516,13279,11827,12732,12525,12400,12499,12416,12351,12354,12235,12188,11516,12205,16229,18187,19210,19147,18965,18892,18526,18417,17440,18161,17840,17113,16588,16244,16333,16143,16465,16781,16379,17051,17163,17210,17235,17292,17316,17328,17243,17273,16635,17307,17587,17695,17759,17778,17946,18072,18156,18212,17460,17838,17660,17457,17111,16887,16479,16275,15783,15176,13779,14147,13553,15030,17004,17461,17406,17219,17179,17512,15986,17175,16651,15844,14921,14247,13409,12760,12189,12110,11323,12352,12556,12771,13042,13246,13318,13536,13748,13828,13353,13984,14049,14002,13974,13924,13801,13629,13560,13442,12826,13191,13117,12879,12742,12713,12703,12620,12232,12067,10113,11691,11568,11274,11032,11035,10770,10504,10419,10444,9400,10436,10369,10385,14453,17124,18094,17901,17925,17776,15404,17064,17233,16981,15983,15732,16194,16302,16334,16254,14723,16675,16757,16831,16740,16780,16693,16538,16470,16340,14593,16283,16198,16228,16232,16526,16876,16970,17057,17181,15891,17447,17505,17588,17513,17561,17199,16944,16775,16496,14686,17452,18478,17287,15573,13263,13611,14595,15303,15640,14434,15727,15545,15149,14444,14511,14419,14302,14200,14214,13462,14026,13963,13939,13973,14018,14200,14219,14191,14441,13913,14596,14739,14939,15005,15082,15007,14991,14668,14463,13382,13749,13607,13191,13251,13215,13039,12937,12797,12692,11425,12034,11716,11264,11215,11043,10783,10684,10576,10387,9581,11993,14834,15349,15483,15167,14720,14375,13773,12993,10069,11209,10722,10883,10966,11201,11228,11025,11213,11330,10121,11302,11257,11268,11114,11083,11057,11030,11046,11078,9746,11306,11375,11517,11667,11877,11977,12012,12155,12152,10436,12173,12046,11918,11689,11396,11299,11069,10794,10358,8247,9361,8963,9386,14214,15456,15960,16322,16675,17195,15571,17677,17662,17530,17312,16904,16406,15774,15252,14690,13528,14417,14617,14731,14802,14861,15057,15029,15134,15296,14652,15334,15280,15157,15075,14594,14153,13705,13232,12882,11133,12383,12098,12030,11919,11688,11558,11360,11367,11359,10331,11251,11126,11180,11195,11103,10991,10926,10906,10934,9979,10730,10659,10682,10605,10440,12471,14423,14316,14105,12899,12685,11862,11126,10137,9061,7696,6380,6324,5976,5221,5729,5616,5610,5432,5468,5386,5467,5437,5392,5312,5493,5441,5448,5406,5263,5090,4840,4638,4554,4345,4354,4194,4026,3810,3500,3209,2996,2821,2457,1531,1558,1162,841,572,261,131]

    judge = input('请选择使用几次指数平滑：一次请按1；二次请按2；三次请按3：')
    ##这里是打开excel将数据储存到数组里面
    wb = load_workbook(filename=r'C:\Users\Badegg\Desktop\1.xlsx')  ##读取路径
    ws = wb.get_sheet_by_name("Sheet1")  ##读取名字为Sheet1的sheet表
    info_data_id = []
    info_data_sales = []

    for row_A in range(1, 3):  ## 遍历第1行到2行
        id = ws.cell(row=row_A, column=1).value  ## 遍历第1行到2行，第1列
        info_data_id.append(id)
    for row_num_BtoU in range(1, len(info_data_id) + 1):  ## 遍历第1行到2行
        row_empty = []  ##建立一个空数组作为临时储存地，每次换行就被清空
        for i in range(2, 1389):  ## 遍历第1行到2行，第1到19列
            data = ws.cell(row=row_num_BtoU, column=i).value
            if data == None:
                pass
            else:
                row_empty.append(data)  ##将单元格信息储存进去
        info_data_sales.append(row_empty)  ##row_empty每次储存完1到19列后压给info_data_sales，然后row_empty被清空
    print(info_data_id)
    print(info_data_sales)
    if judge == '1':
        ##############################下面是计算St(1)下面写为S1_t_######################################
        print('你选择了一次指数平滑预测')
        ##一次指数平滑的初值为S1_1，用S1_1来储存每一组数据的一次平滑的数值
        S1_1 = []
        for m in range(0, len(info_data_id)):
            S1_1_empty = []
            x = 0
            for n in range(0, 3):
                x = x + int(info_data_sales[m][n])
            x = x / 3
            S1_1_empty.append(x)
            S1_1.append(S1_1_empty)
        # print(S1_1)

        a = []  ##这是用来存放阿尔法的数组
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            v = input('请输入第' + str(i + 1) + '组数据的a：')
            a.append(v)

        for i in range(0, len(info_data_sales)):
            MSE = 0
            for j in range(0, len(info_data_sales[i])):
                S1_1[i].append(
                    float(a[i]) * int(info_data_sales[i][j]) + (1 - float(a[i])) * int(S1_1[i][j]))  ##计算预估值
                MSE = (int(S1_1[i][j]) - int(info_data_sales[i][j])) ** 2 + MSE
                # print(info_data_sales[i][j], S1_1[i][j])
            MSE = (MSE ** (1 / 2)) / int(len(info_data_sales[i]))  ##得到均方误差
            info_MSE.append(MSE)
        # print(info_MSE)
        # print(S1_1)
        for i in range(0, len(S1_1)):
            print('第' + str(i + 1) + '组的一次平滑预估值为:' + str(S1_1[i][len(S1_1[i]) - 1]) + '；均方误差为：' + str(info_MSE[i]))

    if judge == '2':
        ##############################下面是计算St(2)下面写为S2_t_######################################
        print('你选择了二次指数平滑预测')

        ##二次指数平滑的初值为S2_1，用S2_1_new来储存每一组数据的一次平滑的数值
        S2_1 = []
        S2_2 = []
        for m in range(0, len(info_data_id)):
            S2_1_empty = []
            x = 0
            for n in range(0, 3):
                x = x + float(info_data_sales[m][n])
            x = x / 3
            S2_1_empty.append(x)
            S2_1.append(S2_1_empty)
            S2_2.append(S2_1_empty)
        # print(S2_2)
        a = []  ##这是用来存放阿尔法的数组
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            v = float(input('请输入第' + str(i + 1) + '组数据的a：'))
            a.append(v)

        ##下面是计算一次指数平滑的值
        S2_1_new1 = []
        for i in range(0, len(info_data_sales)):
            S2_1_new = [[]] * len(info_data_id)
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S2_1_new[i].append(
                        float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(S2_1[i][j]))
                else:
                    S2_1_new[i].append(float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(
                        S2_1_new[i][j - 1]))  ##计算一次指数的值
            S2_1_new1.append(S2_1_new[i])
        # print(S2_1_new1)
        # print(len(S2_1_new1[i]))

        ##下面是计算二次指数平滑的值
        S2_2_new1 = []
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            S2_2_new = [[]] * len(info_data_id)
            MSE = 0
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S2_2_new[i].append(float(a[i]) * float(S2_1_new1[i][j]) + (1 - float(a[i])) * float(S2_2[i][j]))
                else:
                    S2_2_new[i].append(float(a[i]) * float(S2_1_new1[i][j]) + (1 - float(a[i])) * float(
                        S2_2_new[i][j - 1]))  ##计算二次指数的值
                MSE = (int(S2_2_new[i][j]) - int(info_data_sales[i][j])) ** 2 + MSE
            MSE = (MSE ** (1 / 2)) / int(len(info_data_sales[i]))
            info_MSE.append(MSE)
            S2_2_new1.append(S2_2_new[i])
        # print(S2_2_new1)
        # print(len(S2_2_new1[i]))

        ##下面是计算At、Bt以及每个预估值Xt的值，直接计算预估值，不一一列举Xt的值了

        x = []
        x1 = []
        y = []
        y1 = []

        for u in range(1, 101):
            Xt = []
            for i in range(0, len(info_data_sales)):
                At = (float(S2_1_new1[i][len(S2_1_new1[i]) - 1]) * 2 - float(S2_2_new1[i][len(S2_2_new1[i]) - 1]))
                Bt = (float(a[i]) / (1 - float(a[i])) * (
                        float(S2_1_new1[i][len(S2_1_new1[i]) - 1]) - float(S2_2_new1[i][len(S2_2_new1[i]) - 1])))
                Xt.append(At + Bt * int(u))
                if i%2 == 0:
                    x.append(Xt[i])
                    origin_x.append(Xt[i])
                    x1.append(info_MSE[i])
                else:
                    y.append(Xt[i])
                    origin_y.append(info_MSE[i])
                    y1.append(info_MSE[i])
        with open('2.txt','w') as f:
            f.write(str(x)+"\n")
            f.write(str(x1) + "\n")
            f.write(str(y) + "\n")
            f.write(str(y1) + "\n")
        plt.plot(origin_x, origin_y, c='blue')
        plt.savefig('ps 2.png',dpi=1000)




    if judge == '3':
        ##############################下面是计算St(3)下面写为S3_t_######################################
        print('你选择了三次指数平滑预测')
        S3_1 = []
        S3_2 = []
        S3_3 = []
        for m in range(0, len(info_data_id)):
            S3_1_empty = []
            x = 0
            for n in range(0, 3):
                x = x + float(info_data_sales[m][n])
            x = x / 3
            S3_1_empty.append(x)
            S3_1.append(S3_1_empty)
            S3_2.append(S3_1_empty)
            S3_3.append(S3_1_empty)
        # print(S3_1)
        a = []  ##这是用来存放阿尔法的数组
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            v = float(input('请输入第' + str(i + 1) + '组数据的a：'))
            a.append(v)

        ##下面是计算一次指数平滑的值
        S3_1_new1 = []
        for i in range(0, len(info_data_sales)):
            S3_1_new = [[]] * len(info_data_id)
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S3_1_new[i].append(
                        float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(S3_1[i][j]))
                else:
                    S3_1_new[i].append(float(a[i]) * float(info_data_sales[i][j]) + (1 - float(a[i])) * float(
                        S3_1_new[i][j - 1]))  ##计算一次指数的值
            S3_1_new1.append(S3_1_new[i])

        ##下面是计算二次指数平滑的值
        S3_2_new1 = []
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            S3_2_new = [[]] * len(info_data_id)
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S3_2_new[i].append(float(a[i]) * float(S3_1_new1[i][j]) + (1 - float(a[i])) * float(S3_2[i][j]))
                else:
                    S3_2_new[i].append(float(a[i]) * float(S3_1_new1[i][j]) + (1 - float(a[i])) * float(
                        S3_2_new[i][j - 1]))  ##计算二次指数的值
            S3_2_new1.append(S3_2_new[i])

        ##下面是计算二次指数平滑的值
        S3_3_new1 = []
        info_MSE = []  ##计算均方误差来得到最优的a(阿尔法)
        for i in range(0, len(info_data_sales)):
            S3_3_new = [[]] * len(info_data_id)
            MSE = 0
            for j in range(0, len(info_data_sales[i])):
                if j == 0:
                    S3_3_new[i].append(float(a[i]) * float(S3_2_new1[i][j]) + (1 - float(a[i])) * float(S3_3[i][j]))
                else:
                    S3_3_new[i].append(float(a[i]) * float(S3_2_new1[i][j]) + (1 - float(a[i])) * float(
                        S3_3_new[i][j - 1]))  ##计算三次指数的值
                MSE = (int(S3_3_new[i][j]) - int(info_data_sales[i][j])) ** 2 + MSE
            MSE = (MSE ** (1 / 2)) / int(len(info_data_sales[i]))
            info_MSE.append(MSE)
            S3_3_new1.append(S3_3_new[i])
            # print(S3_3_new1)

        ##下面是计算At、Bt、Ct以及每个预估值Xt的值，直接计算预估值，不一一列举Xt的值了
        x = []
        x1 = []
        y = []
        y1 = []
        for u in range(1,101):
            Xt = []
            for i in range(0, len(info_data_sales)):
                At = (
                        float(S3_1_new1[i][len(S3_1_new1[i]) - 1]) * 3 - float(
                    S3_2_new1[i][len(S3_2_new1[i]) - 1]) * 3 + float(
                    S3_3_new1[i][len(S3_3_new1[i]) - 1]))
                Bt = ((float(a[i]) / (2 * ((1 - float(a[i])) ** 2))) * ((6 - 5 * float(a[i])) * (
                        float(S3_1_new1[i][len(S3_1_new1[i]) - 1]) - 2 * (5 - 4 * float(a[i])) * float(
                    S3_2_new1[i][len(S3_2_new1[i]) - 1]) + (4 - 3 * float(a[i])) * float(
                    S3_3_new1[i][len(S3_3_new1[i]) - 1]))))
                Ct = (((float(a[i])) ** 2) / (2 * ((1 - float(a[i])) ** 2))) * (
                        float(S3_1_new1[i][len(S3_1_new1[i]) - 1]) - float(
                    S3_2_new1[i][len(S3_2_new1[i]) - 1]) * 2 + float(
                    S3_3_new1[i][len(S3_3_new1[i]) - 1]))
                Xt.append(At + Bt * int(u) + Ct * (int(u) ** 2))
                if i%2 == 0:
                    x.append(Xt[i])
                    origin_x.append(Xt[i])
                    x1.append(info_MSE[i])
                else:
                    y.append(Xt[i])
                    origin_y.append(info_MSE[i])
                    y1.append(info_MSE[i])
        with open('3.txt','w') as f:
            f.write(str(x)+"\n")
            f.write(str(x1) + "\n")
            f.write(str(y) + "\n")
            f.write(str(y1) + "\n")
        plt.plot(origin_x, origin_y,c='blue')
        plt.savefig('ps 3.png', dpi=1000)

